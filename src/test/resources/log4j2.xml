<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，
    当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="INFO" monitorInterval="5"  >
	<Properties>
		<property name="service_name">liteFlow</property>
		<property name="parent_pattern">[%d{MM-dd HH:mm:ss SSS} %-5level] %c{3} %M %L - %m%n%ex</property>
		<property name="no_location_pattern">[%d{MM-dd HH:mm:ss SSS} %-5level] %c{3} - %m%n%ex</property>
		<property name="log_home">/opt/scf/log/${service_name}</property>
		<property name="age">2</property>
		<!-- 配置 日志删除的时间， JDK 1.7以上支持 -->
		<property name="deltime">240h</property>
	</Properties>
	<!--先定义所有的appender-->
	<Appenders>
        <!--这个输出控制台的配置  target="SYSTEM_OUT"-->
		<Console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式-->
			<PatternLayout>
				<Pattern>${no_location_pattern}</Pattern>
			</PatternLayout>
		</Console>


		<!-- DEBUG begin -->
		<RollingRandomAccessFile name="DEBUG" fileName="${log_home}/${service_name}_debug.log"
			filePattern="${log_home}/${service_name}_debug.log.%d{yyyy-MM-dd-HH}.log">

			<Filters>
				<ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>

			<PatternLayout>
				<Pattern>${parent_pattern}</Pattern>
			</PatternLayout>

			<Policies>
				<!-- 检测文件的拆分和删除的时间间隔，时间是秒， TimeBased是基于时间触发的周期性的保存日志，它有两个参数，interval：触发时间，单位为日志filePattern时间命名的的精度单位，默认是1。
				modulate:布尔类型。说明是否对日志生成时间进行调制。若为true，则日志时间将以0点为边界进行偏移计算。例如第一次日志保存时间是3点，modulate为true，interval是4h。那么下次生成日志时间是4点，08:00，12:00…… -->
				<TimeBasedTriggeringPolicy interval="1"
					modulate="true" />
			</Policies>
			<!--指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的  max为最大创建数-->
			<DefaultRolloverStrategy max="${age}">
				<Delete basePath="${log_home}" maxDepth="1">
					<IfFileName glob="*-*.log" />
					<IfLastModified age="${deltime}" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile >
		<!-- DEBUG end -->

		<!-- INFO begin -->
		<RollingRandomAccessFile  name="INFO" fileName="${log_home}/${service_name}_info.log"
			filePattern="${log_home}/${service_name}_info.log.%d{yyyy-MM-dd-HH}.log">

			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<Filters>
				<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			<PatternLayout>
				<Pattern>${no_location_pattern}</Pattern>
			</PatternLayout>

			<Policies>
				<!-- 检测文件的拆分和删除的时间间隔，时间是秒， TimeBased是基于时间触发的周期性的保存日志，它有两个参数，interval：触发时间，单位为日志filePattern时间命名的的精度单位，默认是1。modulate:布尔类型。说明是否对日志生成时间进行调制。若为true，则日志时间将以0点为边界进行偏移计算。例如第一次日志保存时间是3点，modulate为true，interval是4h。那么下次生成日志时间是4点，08:00，12:00…… -->
				<TimeBasedTriggeringPolicy interval="1"
					modulate="true" />
			</Policies>
			<DefaultRolloverStrategy max="${age}">
				<Delete basePath="${log_home}" maxDepth="1">
					<IfFileName glob="*-*.log" />
					<IfLastModified age="${deltime}" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile >
		<!-- INFO end -->


		<!-- warn begin -->
		<RollingRandomAccessFile  name="WARN" fileName="${log_home}/${service_name}_warn.log"
					 filePattern="${log_home}/${service_name}_warn.log.%d{yyyy-MM-dd-HH}.log">
			<Filters>
				<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			</Filters>
			<PatternLayout>
				<Pattern>${no_location_pattern}</Pattern>
			</PatternLayout>
			<Policies>
				<!-- 检测文件的拆分和删除的时间间隔，时间是秒， TimeBased是基于时间触发的周期性的保存日志，它有两个参数，interval：触发时间，单位为日志filePattern时间命名的的精度单位，默认是1。modulate:布尔类型。说明是否对日志生成时间进行调制。若为true，则日志时间将以0点为边界进行偏移计算。例如第一次日志保存时间是3点，modulate为true，interval是4h。那么下次生成日志时间是4点，08:00，12:00…… -->
				<TimeBasedTriggeringPolicy interval="1"
										   modulate="true" />
			</Policies>
			<DefaultRolloverStrategy max="${age}">
				<Delete basePath="${log_home}" maxDepth="1">
					<IfFileName glob="*-*.log" />
					<IfLastModified age="${deltime}" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile >
		<!-- warn end -->


		<!-- ERROR begin -->
		<RollingRandomAccessFile  name="ERROR" fileName="${log_home}/${service_name}_error.log"
			filePattern="${log_home}/${service_name}_error.log.%d{yyyy-MM-dd-HH}.log">
			<Filters>
				<ThresholdFilter level="error" onMatch="ACCEPT"	onMismatch="DENY" />
			</Filters>
			<PatternLayout>
				<Pattern>${no_location_pattern}</Pattern>
			</PatternLayout>

			<Policies>
				<TimeBasedTriggeringPolicy />
			</Policies>
			<DefaultRolloverStrategy max="${age}">
				<Delete basePath="${log_home}" maxDepth="1">
					<IfFileName glob="*-*.log" />
					<IfLastModified age="${deltime}" />
				</Delete>
			</DefaultRolloverStrategy>
		</RollingRandomAccessFile >
		<!-- ERROR end -->
	</Appenders>

	<Loggers>
		<!--混合异步模式: 混合模式不可以和全异步模式同时使用 否则会启动两个线程 中间会有一个不必要的步骤
		1.<asyncRoot> or <asyncLogger> 代替 Root 和 Logger
		2.默认情况不会输出位置信息，因为输出位置信息会慢30-100倍。如果需要位置信息，需要在所有相关记录器（包括根记录器）的配置中设置“includeLocation = true”
		-->
		<asyncRoot  level="DEBUG" includeLocation="true">
			<appender-ref ref="DEBUG" />
			<appender-ref ref="INFO" />
			<appender-ref ref="WARN" />
			<appender-ref ref="ERROR" />
			<appender-ref ref="Console" />
		</asyncRoot>
	</Loggers>
</Configuration>
